---
- name: create task definition for {{ project_name }}-{{ microservice }}
  community.aws.ecs_taskdefinition:
    containers:
      # - name: sumologic-firelens
      #   essential: true
      #   image: "public.ecr.aws/aws-observability/aws-for-fluent-bit:stable"
      #   firelensConfiguration:
      #     type: fluentbit
      #     options:
      #       enable-ecs-log-metadata: "true"
      #   logConfiguration:
      #    logDriver: awslogs
      #    options:
      #      awslogs-group: "/ecs/{{ project_name }}/{{ tier }}-{{ container_name }}/sumologic/logs"
      #      awslogs-region: "{{ region }}"
      #      awslogs-create-group: "true"
      #      awslogs-stream-prefix: "{{ project_name }}-{{ container_name }}"
      - name: "{{ app_name }}-{{microservice}}"
        essential: true
        image: "newrelic/nri-ecs:1.9.2"
        environment:
          - name: NRIA_OVERRIDE_HOST_ROOT
            value: ""
          - name: NRIA_IS_FORWARD_ONLY
            value: "true"
          - name: NEW_RELIC_APP_NAME
            value: "{{ app_name }}-{{microservice}}"
          - name: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
            value: "true"
          - name: NEW_RELIC_HOST
            value: "gov-collector.newrelic.com"
          - name: FARGATE
            value: "true"
          - name: NRIA_PASSTHROUGH_ENVIRONMENT
            value: "ECS_CONTAINER_METADATA_URI,ECS_CONTAINER_METADATA_URI_V4,FARGATE"
          - name: NRIA_CUSTOM_ATTRIBUTES
            value: "{\"nrDeployMethod\":\"downloadPage\"}"
          - name: NRIA_LICENSE_KEY
            value: "{{ newrelic_license_key }}"
          - name: METRIC_INGEST_URI
            value: "https://gov-metric-api.newrelic.com/metric/v1"
      - name: "{{ program }}-{{ project_name }}-{{ microservice }}"
        essential: true
        image: "{{ container_image_url }}:{{ image_version }}"
        environment: "{{ container_env }}"
        entryPoint: "{% if container_entrypoint is defined %}{{ container_entrypoint }}{% else %}[]{% endif %}"
        portMappings:
          - containerPort: "{{ container_port }}"
            hostPort: "{{ container_port }}"
        # logConfiguration:
        #   logDriver: awsfirelens
        #   options:
        #     Name: "http"
        #     Host: "{{ sumo_collector_endpoint }}"
        #     URI: "/receiver/v1/http/{{ sumo_collector_token }}"
        #     Port: "443"
        #     tls: "on"
        #     tls.verify: "off"
        #     Format: "json_lines"
        #     Retry_Limit: "2"
        logConfiguration:
         logDriver: awslogs
         options:
           awslogs-group: "/ecs/{{ project_name }}/{{ tier }}-{{ microservice }}/{{ microservice }}/logs"
           awslogs-region: "{{ region }}"
           awslogs-create-group: "true"
           awslogs-stream-prefix: "{{ project_name }}-{{ microservice }}"
    launch_type: FARGATE
    network_mode: awsvpc
    execution_role_arn: "arn:aws:iam::{{ account }}:role/{{ execution_role }}" #{{ iam_prefix }}-{{ project_name }}-ecs-task-execution-role-{{ tier }}"
    task_role_arn: "arn:aws:iam::{{ account }}:role/{{ task_role }}" #{{ iam_prefix }}-{{ project_name }}-ecs-task-role-{{ tier }}"
    family: "{{ program }}-{{ tier }}-{{ project_name }}-{{ microservice }}"
    memory: "{{ container_memory }}"
    cpu: "{{ container_cpu }}"
    state: present
    force_create: true
    region: "{{ region }}"
  register: task_output

############################################################################################################################
#     Task Definition Queries
############################################################################################################################
- name: query task definition - {{ microservice }}
  ecs_taskdefinition_info:
    task_definition: "{{ program }}-{{ tier }}-{{ project_name }}-{{ microservice }}"
    region: "{{ region }}"
  register: task

############################################################################################################################
#     Service Queries
############################################################################################################################
- name: query {{ microservice }} service
  ecs_service_info:
    cluster: "{{ ecs_cluster_name }}"
    service: "{{ program }}-{{ tier }}-{{ project_name }}-{{ microservice }}"
    details: true
    region: "{{ region }}"
  register: service

- name: set facts
  set_fact:
    task_revision: "{{ task.revision }}"
    task_name: "{{ task.family }}"
    lb: "{{ service.services[0].loadBalancers }}"
    role_arn: "{{ service.services[0].roleArn }}"

###########################################################################################################################
#Update Services
############################################################################################################################
- name: update {{ microservice }} service
  ecs_service:
    state: present
    name: "{{ program }}-{{ tier }}-{{ project_name }}-{{ microservice }}"
    cluster: "{{ ecs_cluster_name }}"
    task_definition: "{{ task_name }}:{{ task_revision }}"
    role: "{{ role_arn }}"
    force_new_deployment: yes
    deployment_configuration:
      minimum_healthy_percent: 50
      maximum_percent: 200
      deployment_circuit_breaker:
        enable: true
        rollback: false
    desired_count: 1
    load_balancers: "{{ lb }}"
    region: "{{ region }}"
  register: output